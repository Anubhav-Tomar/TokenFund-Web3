"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unstorage";
exports.ids = ["vendor-chunks/unstorage"];
exports.modules = {

/***/ "(ssr)/./node_modules/unstorage/dist/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/unstorage/dist/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: () => (/* binding */ builtinDrivers),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   defineDriver: () => (/* binding */ defineDriver),\n/* harmony export */   joinKeys: () => (/* reexport safe */ _shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   normalizeBaseKey: () => (/* reexport safe */ _shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   normalizeKey: () => (/* reexport safe */ _shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   prefixStorage: () => (/* reexport safe */ _shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.p),\n/* harmony export */   restoreSnapshot: () => (/* binding */ restoreSnapshot),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! destr */ \"(ssr)/./node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/unstorage.BqzpVTXx.mjs */ \"(ssr)/./node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        getInstance: ()=>data,\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            return data.get(key) ?? null;\n        },\n        getItemRaw (key) {\n            return data.get(key) ?? null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return [\n                ...data.keys()\n            ];\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage(options = {}) {\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key, opts = {}) {\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key, opts = {}) {\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value));\n        },\n        getItems (items, commonOptions = {}) {\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key, opts = {}) {\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(value));\n        },\n        async setItem (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value, opts = {}) {\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key, opts = {}) {\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base, opts = {}) {\n            base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            for (const mount of mounts){\n                const rawKeys = await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                for (const key of rawKeys){\n                    const fullKey = mount.mountpoint + (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n                    if (!maskedMounts.some((p)=>fullKey.startsWith(p))) {\n                        allKeys.push(fullKey);\n                    }\n                }\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            return base ? allKeys.filter((key)=>key.startsWith(base) && key[key.length - 1] !== \"$\") : allKeys.filter((key)=>key[key.length - 1] !== \"$\");\n        },\n        // Utils\n        async clear (base, opts = {}) {\n            base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(`already mounted at ${base}`);\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base, _dispose = true) {\n            base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                context.unwatch[base]?.();\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount (key = \"\") {\n            key = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts (base = \"\", opts = {}) {\n            base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        },\n        // Aliases\n        keys: (base, opts = {})=>storage.getKeys(base, opts),\n        get: (key, opts = {})=>storage.getItem(key, opts),\n        set: (key, value, opts = {})=>storage.setItem(key, value, opts),\n        has: (key, opts = {})=>storage.hasItem(key, opts),\n        del: (key, opts = {})=>storage.removeItem(key, opts),\n        remove: (key, opts = {})=>storage.removeItem(key, opts)\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\n    base = (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_BqzpVTXx_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    \"azure-app-configuration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azureAppConfiguration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azure-cosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azureCosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azure-key-vault\": \"unstorage/drivers/azure-key-vault\",\n    \"azureKeyVault\": \"unstorage/drivers/azure-key-vault\",\n    \"azure-storage-blob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azureStorageBlob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azure-storage-table\": \"unstorage/drivers/azure-storage-table\",\n    \"azureStorageTable\": \"unstorage/drivers/azure-storage-table\",\n    \"capacitor-preferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"capacitorPreferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflareKVBinding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflareKVHttp\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflare-r2-binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"cloudflareR2Binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"db0\": \"unstorage/drivers/db0\",\n    \"deno-kv-node\": \"unstorage/drivers/deno-kv-node\",\n    \"denoKVNode\": \"unstorage/drivers/deno-kv-node\",\n    \"deno-kv\": \"unstorage/drivers/deno-kv\",\n    \"denoKV\": \"unstorage/drivers/deno-kv\",\n    \"fs-lite\": \"unstorage/drivers/fs-lite\",\n    \"fsLite\": \"unstorage/drivers/fs-lite\",\n    \"fs\": \"unstorage/drivers/fs\",\n    \"github\": \"unstorage/drivers/github\",\n    \"http\": \"unstorage/drivers/http\",\n    \"indexedb\": \"unstorage/drivers/indexedb\",\n    \"localstorage\": \"unstorage/drivers/localstorage\",\n    \"lru-cache\": \"unstorage/drivers/lru-cache\",\n    \"lruCache\": \"unstorage/drivers/lru-cache\",\n    \"memory\": \"unstorage/drivers/memory\",\n    \"mongodb\": \"unstorage/drivers/mongodb\",\n    \"netlify-blobs\": \"unstorage/drivers/netlify-blobs\",\n    \"netlifyBlobs\": \"unstorage/drivers/netlify-blobs\",\n    \"null\": \"unstorage/drivers/null\",\n    \"overlay\": \"unstorage/drivers/overlay\",\n    \"planetscale\": \"unstorage/drivers/planetscale\",\n    \"redis\": \"unstorage/drivers/redis\",\n    \"s3\": \"unstorage/drivers/s3\",\n    \"session-storage\": \"unstorage/drivers/session-storage\",\n    \"sessionStorage\": \"unstorage/drivers/session-storage\",\n    \"uploadthing\": \"unstorage/drivers/uploadthing\",\n    \"upstash\": \"unstorage/drivers/upstash\",\n    \"vercel-blob\": \"unstorage/drivers/vercel-blob\",\n    \"vercelBlob\": \"unstorage/drivers/vercel-blob\",\n    \"vercel-kv\": \"unstorage/drivers/vercel-kv\",\n    \"vercelKV\": \"unstorage/drivers/vercel-kv\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unstorage/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ normalizeKey),\n/* harmony export */   b: () => (/* binding */ asyncCall),\n/* harmony export */   c: () => (/* binding */ serializeRaw),\n/* harmony export */   d: () => (/* binding */ deserializeRaw),\n/* harmony export */   j: () => (/* binding */ joinKeys),\n/* harmony export */   n: () => (/* binding */ normalizeBaseKey),\n/* harmony export */   p: () => (/* binding */ prefixStorage),\n/* harmony export */   s: () => (/* binding */ stringify)\n/* harmony export */ });\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return BASE64_PREFIX + base64Encode(value);\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    return base64Decode(value.slice(BASE64_PREFIX.length));\n}\nfunction base64Decode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input, \"base64\");\n    }\n    return Uint8Array.from(globalThis.atob(input), (c)=>c.codePointAt(0));\n}\nfunction base64Encode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input).toString(\"base64\");\n    }\n    return globalThis.btoa(String.fromCodePoint(...input));\n}\nconst storageKeyProperties = [\n    \"hasItem\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = (key = \"\", ...args)=>// @ts-ignore\n            storage[property](base + key, ...args);\n    }\n    nsStorage.getKeys = (key = \"\", ...arguments_)=>storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    if (!key) {\n        return \"\";\n    }\n    return key.split(\"?\")[0]?.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") || \"\";\n}\nfunction joinKeys(...keys) {\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unstorage/dist/shared/unstorage.BqzpVTXx.mjs\n");

/***/ })

};
;